using System.Text;

namespace Handlr.SourceGenerator.Templates;

/// <summary>
/// Template for generating the HandlrDispatcher implementation
/// </summary>
public static class DispatcherTemplate
{
    /// <summary>
    /// Generates the HandlrDispatcher implementation
    /// </summary>
    /// <param name="includeDebugInfo">Whether to include debug information</param>
    /// <returns>The generated dispatcher code</returns>
    public static string Generate(bool includeDebugInfo = false)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        if (includeDebugInfo)
        {
            sb.AppendLine("// Generated Handlr dispatcher implementation");
        }
        sb.AppendLine();

        sb.AppendLine("using System;");
        sb.AppendLine("using System.Reflection;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Handlr.Abstractions.Commands;");
        sb.AppendLine("using Handlr.Abstractions.Queries;");
        sb.AppendLine("using Handlr.Abstractions.Common;");
        sb.AppendLine();

        sb.AppendLine("namespace Handlr.Generated;");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Default implementation of IHandlrDispatcher that routes commands and queries to their handlers.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("internal sealed class HandlrDispatcher : IHandlrDispatcher");
        sb.AppendLine("{");
        sb.AppendLine("    private readonly IServiceProvider _serviceProvider;");
        sb.AppendLine();
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Initializes a new instance of the HandlrDispatcher class.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"serviceProvider\">The service provider for resolving handlers</param>");
        sb.AppendLine("    public HandlrDispatcher(IServiceProvider serviceProvider)");
        sb.AppendLine("    {");
        sb.AppendLine("        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));");
        sb.AppendLine("    }");
        sb.AppendLine();

        // SendAsync for commands without result
        sb.AppendLine("    /// <inheritdoc />");
        sb.AppendLine("    public async Task SendAsync<TCommand>(TCommand command, CancellationToken cancellationToken = default)");
        sb.AppendLine("        where TCommand : ICommand");
        sb.AppendLine("    {");
        sb.AppendLine("        if (command == null) throw new ArgumentNullException(nameof(command));");
        sb.AppendLine();
        sb.AppendLine("        var handler = _serviceProvider.GetRequiredService<ICommandHandler<TCommand>>();");
        sb.AppendLine("        await handler.Handle(command, cancellationToken);");
        sb.AppendLine("    }");
        sb.AppendLine();

        // SendAsync for commands with result
        sb.AppendLine("    /// <inheritdoc />");
        sb.AppendLine("    public async Task<TResult> SendAsync<TResult>(ICommand<TResult> command, CancellationToken cancellationToken = default)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (command == null) throw new ArgumentNullException(nameof(command));");
        sb.AppendLine();
        sb.AppendLine("        var commandType = command.GetType();");
        sb.AppendLine("        var handlerType = typeof(ICommandHandler<,>).MakeGenericType(commandType, typeof(TResult));");
        sb.AppendLine("        var handler = _serviceProvider.GetRequiredService(handlerType);");
        sb.AppendLine("        var method = handlerType.GetMethod(\"Handle\");");
        sb.AppendLine("        var task = (Task<TResult>)method!.Invoke(handler, new object[] { command, cancellationToken })!;");
        sb.AppendLine("        return await task;");
        sb.AppendLine("    }");
        sb.AppendLine();

        // SendAsync for queries
        sb.AppendLine("    /// <inheritdoc />");
        sb.AppendLine("    public async Task<TResult> SendAsync<TResult>(IQuery<TResult> query, CancellationToken cancellationToken = default)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (query == null) throw new ArgumentNullException(nameof(query));");
        sb.AppendLine();
        sb.AppendLine("        var queryType = query.GetType();");
        sb.AppendLine("        var handlerType = typeof(IQueryHandler<,>).MakeGenericType(queryType, typeof(TResult));");
        sb.AppendLine("        var handler = _serviceProvider.GetRequiredService(handlerType);");
        sb.AppendLine("        var method = handlerType.GetMethod(\"Handle\");");
        sb.AppendLine("        var task = (Task<TResult>)method!.Invoke(handler, new object[] { query, cancellationToken })!;");
        sb.AppendLine("        return await task;");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}
