using System.Collections.Generic;
using System.Linq;
using System.Text;
using Handlr.SourceGenerator.Models;

namespace Handlr.SourceGenerator.Templates;

/// <summary>
/// Template for generating service registration code.
/// </summary>
public static class RegistrationTemplate
{
    /// <summary>
    /// Generates service registration code for dependency injection.
    /// </summary>
    /// <param name="commands">List of discovered commands</param>
    /// <param name="queries">List of discovered queries</param>
    /// <param name="behaviors">List of discovered pipeline behaviors</param>
    /// <param name="customHandlers">List of discovered custom handlers</param>
    /// <param name="includeDebugInfo">Whether to include debug information</param>
    /// <returns>The generated service registration code</returns>
    public static string Generate(
        IEnumerable<CommandInfo> commands,
        IEnumerable<QueryInfo> queries,
        IEnumerable<PipelineBehaviorInfo> behaviors,
        IEnumerable<HandlerInfo> customHandlers,
        bool includeDebugInfo = false)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        if (includeDebugInfo)
        {
            sb.AppendLine("// Generated Handlr service registration extensions");
        }
        sb.AppendLine();

        sb.AppendLine("using System;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Handlr.Abstractions.Commands;");
        sb.AppendLine("using Handlr.Abstractions.Queries;");
        sb.AppendLine("using Handlr.Abstractions.Results;");
        sb.AppendLine("using Handlr.Abstractions.Common;");

        // Add using statements for all command and query namespaces
        var namespaces = new HashSet<string>();
        foreach (var command in commands)
        {
            namespaces.Add(command.Namespace);
        }
        foreach (var query in queries)
        {
            namespaces.Add(query.Namespace);
        }
        foreach (var ns in namespaces.OrderBy(x => x))
        {
            sb.AppendLine($"using {ns};");
        }
        sb.AppendLine("using Handlr.Abstractions.Pipelines;");
        sb.AppendLine("using Handlr.Generated;");
        sb.AppendLine();

        sb.AppendLine("namespace Handlr.Abstractions.Extensions;");
        sb.AppendLine();

        // Generate the extension class
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Generated extension methods for registering discovered Handlr handlers.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class GeneratedHandlrServiceCollectionExtensions");
        sb.AppendLine("{");

        // Handler registration method that extends the base AddHandlr
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Adds all discovered Handlr handlers to the service collection.");
        sb.AppendLine("    /// This extends the base AddHandlr() with automatically discovered handlers.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"services\">The service collection</param>");
        sb.AppendLine("    /// <returns>The service collection for chaining</returns>");
        sb.AppendLine("    public static IServiceCollection AddDiscoveredHandlrHandlers(this IServiceCollection services)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (services == null)");
        sb.AppendLine("            throw new ArgumentNullException(nameof(services));");
        sb.AppendLine();
        sb.AppendLine("        // Register the enhanced generated dispatcher to replace the basic one");
        sb.AppendLine("        services.AddScoped<IHandlrDispatcher, GeneratedHandlrDispatcher>();");
        sb.AppendLine("        RegisterDiscoveredHandlers(services);");
        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Handler registration method
        sb.AppendLine("    private static void RegisterDiscoveredHandlers(IServiceCollection services)");
        sb.AppendLine("    {");

        // Register command handlers
        foreach (var command in commands)
        {
            if (command.HasResult)
            {
                sb.AppendLine($"        services.AddScoped<ICommandHandler<{command.Name}, {command.ResultType?.ToDisplayString()}>, {command.GeneratedHandlerName}>();");
            }
            else
            {
                sb.AppendLine($"        services.AddScoped<ICommandHandler<{command.Name}>, {command.GeneratedHandlerName}>();");
            }
        }

        // Register query handlers
        foreach (var query in queries)
        {
            sb.AppendLine($"        services.AddScoped<IQueryHandler<{query.Name}, {query.ResultType.ToDisplayString()}>, {query.GeneratedHandlerName}>();");
        }

        // Register custom handlers
        foreach (var handler in customHandlers)
        {
            if (handler.IsCommandHandler)
            {
                if (handler.HasResult)
                {
                    sb.AppendLine($"        services.AddScoped<ICommandHandler<{handler.RequestType.ToDisplayString()}, {handler.ResultType?.ToDisplayString()}>, {handler.Name}>();");
                }
                else
                {
                    sb.AppendLine($"        services.AddScoped<ICommandHandler<{handler.RequestType.ToDisplayString()}>, {handler.Name}>();");
                }
            }
            else
            {
                sb.AppendLine($"        services.AddScoped<IQueryHandler<{handler.RequestType.ToDisplayString()}, {handler.ResultType?.ToDisplayString()}>, {handler.Name}>();");
            }
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}
