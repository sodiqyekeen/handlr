using System.Text;
using Handlr.SourceGenerator.Models;

namespace Handlr.SourceGenerator.Templates;

/// <summary>
/// Template for generating query handlers with caching and pipeline support.
/// </summary>
public static class QueryHandlerTemplate
{
    /// <summary>
    /// Generates a query handler class with caching and pipeline behavior integration.
    /// </summary>
    /// <param name="queryInfo">Information about the query</param>
    /// <param name="includeDebugInfo">Whether to include debug information</param>
    /// <returns>The generated query handler code</returns>
    public static string Generate(QueryInfo queryInfo, bool includeDebugInfo = false)
    {
        var sb = new StringBuilder();

        if (includeDebugInfo)
        {
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine($"// Generated for query: {queryInfo.FullName}");
            sb.AppendLine($"// Result type: {queryInfo.ResultType.ToDisplayString()}");
            sb.AppendLine();
        }

        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Handlr.Abstractions.Queries;");
        sb.AppendLine("using Handlr.Abstractions.Pipelines;");
        sb.AppendLine("using Handlr.Abstractions.Results;");
        sb.AppendLine();

        sb.AppendLine($"namespace {queryInfo.Namespace};");
        sb.AppendLine();

        // Generate the handler class
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Generated handler for {queryInfo.Name} query with caching and pipeline support.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"public partial class {queryInfo.GeneratedHandlerName} : {queryInfo.HandlerInterfaceName}");
        sb.AppendLine("{");

        // Private fields
        sb.AppendLine("    private readonly IServiceProvider _serviceProvider;");
        sb.AppendLine($"    private readonly IEnumerable<IPipelineBehavior<{queryInfo.Name}, {queryInfo.ResultType.ToDisplayString()}>> _behaviors;");
        sb.AppendLine();

        // Constructor
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Initializes a new instance of the {queryInfo.GeneratedHandlerName} class.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"serviceProvider\">The service provider</param>");
        sb.AppendLine($"    public {queryInfo.GeneratedHandlerName}(IServiceProvider serviceProvider)");
        sb.AppendLine("    {");
        sb.AppendLine("        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));");
        sb.AppendLine($"        _behaviors = serviceProvider.GetServices<IPipelineBehavior<{queryInfo.Name}, {queryInfo.ResultType.ToDisplayString()}>>() ?? Enumerable.Empty<IPipelineBehavior<{queryInfo.Name}, {queryInfo.ResultType.ToDisplayString()}>>();");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Handle method
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Handles the query with caching and pipeline behavior execution.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"query\">The query to handle</param>");
        sb.AppendLine("    /// <param name=\"cancellationToken\">Cancellation token</param>");
        sb.AppendLine("    /// <returns>A task representing the asynchronous operation with the result</returns>");
        sb.AppendLine($"    public async Task<{queryInfo.ResultType.ToDisplayString()}> Handle({queryInfo.Name} query, CancellationToken cancellationToken = default)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (query == null)");
        sb.AppendLine("            throw new ArgumentNullException(nameof(query));");
        sb.AppendLine();
        sb.AppendLine("        return await ExecutePipeline(query, () => HandleCore(query, cancellationToken), cancellationToken);");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Pipeline execution method
        sb.AppendLine($"    private async Task<{queryInfo.ResultType.ToDisplayString()}> ExecutePipeline({queryInfo.Name} query, RequestHandlerDelegate<{queryInfo.ResultType.ToDisplayString()}> next, CancellationToken cancellationToken)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (!_behaviors.Any())");
        sb.AppendLine("        {");
        sb.AppendLine("            return await next();");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        var behaviorIndex = 0;");
        sb.AppendLine("        var orderedBehaviors = _behaviors.OrderBy(b => GetBehaviorPriority(b)).ToList();");
        sb.AppendLine();
        sb.AppendLine($"        async Task<{queryInfo.ResultType.ToDisplayString()}> ExecuteNextBehavior()");
        sb.AppendLine("        {");
        sb.AppendLine("            if (behaviorIndex >= orderedBehaviors.Count)");
        sb.AppendLine("            {");
        sb.AppendLine("                return await next();");
        sb.AppendLine("            }");
        sb.AppendLine();
        sb.AppendLine("            var behavior = orderedBehaviors[behaviorIndex++];");
        sb.AppendLine("            return await behavior.Handle(query, ExecuteNextBehavior, cancellationToken);");
        sb.AppendLine("        }");
        sb.AppendLine();
        sb.AppendLine("        return await ExecuteNextBehavior();");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Core handler method (to be implemented by user)
        sb.AppendLine($"    private async Task<{queryInfo.ResultType.ToDisplayString()}> HandleCore({queryInfo.Name} query, CancellationToken cancellationToken)");
        sb.AppendLine("    {");
        sb.AppendLine("        var result = await HandleAsync(query, cancellationToken);");
        sb.AppendLine("        return result;");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Behavior priority helper
        sb.AppendLine("    private static int GetBehaviorPriority(object behavior)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Check for priority attributes or interfaces");
        sb.AppendLine("        var type = behavior.GetType();");
        sb.AppendLine("        // Default priority is 100");
        sb.AppendLine("        return 100;");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Cache key generation helper (optional feature)
        sb.AppendLine($"    private string GenerateCacheKey({queryInfo.Name} query)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Generate cache key based on query properties");
        sb.AppendLine($"        var key = $\"{queryInfo.Name}:{{GetQueryHash(query)}}\";");
        sb.AppendLine("        return key;");
        sb.AppendLine("    }");
        sb.AppendLine();

        sb.AppendLine($"    private string GetQueryHash({queryInfo.Name} query)");
        sb.AppendLine("    {");
        sb.AppendLine("        // Simple hash based on query properties");
        sb.AppendLine("        // In a real implementation, you'd serialize relevant properties");
        sb.AppendLine("        return query.GetHashCode().ToString();");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Partial method for user implementation
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Implement this method to provide the query handling logic.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"query\">The query to handle</param>");
        sb.AppendLine("    /// <param name=\"cancellationToken\">Cancellation token</param>");
        sb.AppendLine("    /// <returns>A task representing the asynchronous operation with the result</returns>");
        sb.AppendLine($"    public partial Task<{queryInfo.ResultType.ToDisplayString()}> HandleAsync({queryInfo.Name} query, CancellationToken cancellationToken);");

        sb.AppendLine("}");

        return sb.ToString();
    }
}
