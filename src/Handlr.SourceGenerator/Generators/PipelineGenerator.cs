using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Handlr.SourceGenerator.Models;
using Handlr.SourceGenerator.Diagnostics;

namespace Handlr.SourceGenerator.Generators;

/// <summary>
/// Generator for pipeline behavior registration and configuration.
/// </summary>
public class PipelineGenerator
{
    /// <summary>
    /// Generates pipeline behavior configuration and validation.
    /// </summary>
    /// <param name="context">The source production context</param>
    /// <param name="behaviors">List of discovered pipeline behaviors</param>
    /// <param name="includeDebugInfo">Whether to include debug information</param>
    public static void Generate(
        SourceProductionContext context,
        IEnumerable<PipelineBehaviorInfo> behaviors,
        bool includeDebugInfo = false)
    {
        var behaviorList = behaviors.ToList();

        // Validate behaviors
        ValidateBehaviors(context, behaviorList);

        // Generate behavior configuration if any behaviors exist
        if (behaviorList.Any())
        {
            GenerateBehaviorConfiguration(context, behaviorList, includeDebugInfo);
        }
    }

    private static void ValidateBehaviors(
        SourceProductionContext context,
        IEnumerable<PipelineBehaviorInfo> behaviors)
    {
        var behaviorGroups = behaviors.GroupBy(b => b.FullName);

        foreach (var group in behaviorGroups)
        {
            var behaviorList = group.ToList();

            // Check for duplicate registrations
            if (behaviorList.Count > 1)
            {
                var diagnostic = CreateDiagnostic(
                    DiagnosticDescriptors.PipelineBehaviorRegistrationConflict,
                    behaviorList.First().Location,
                    group.Key);

                context.ReportDiagnostic(diagnostic);
            }

            // Validate each behavior
            foreach (var behavior in behaviorList)
            {
                ValidateBehavior(context, behavior);
            }
        }
    }

    private static void ValidateBehavior(SourceProductionContext context, PipelineBehaviorInfo behavior)
    {
        // Check if the behavior properly implements IPipelineBehavior
        var implementsInterface = behavior.TypeSymbol.AllInterfaces
            .Any(i => i.ToDisplayString().StartsWith("Handlr.Abstractions.Pipelines.IPipelineBehavior"));

        if (!implementsInterface)
        {
            var diagnostic = CreateDiagnostic(
                DiagnosticDescriptors.PipelineBehaviorMustImplementInterface,
                behavior.Location,
                behavior.Name);

            context.ReportDiagnostic(diagnostic);
        }

        // Check for parameterless constructor
        var hasParameterlessConstructor = behavior.TypeSymbol.Constructors
            .Any(c => c.Parameters.Length == 0 && c.DeclaredAccessibility == Accessibility.Public);

        if (!hasParameterlessConstructor)
        {
            // Check if it has other constructors that might need dependency injection
            var hasOtherConstructors = behavior.TypeSymbol.Constructors
                .Any(c => c.Parameters.Length > 0 && c.DeclaredAccessibility == Accessibility.Public);

            if (!hasOtherConstructors)
            {
                var diagnostic = CreateDiagnostic(
                    DiagnosticDescriptors.PipelineBehaviorMustImplementInterface,
                    behavior.Location,
                    behavior.Name);

                context.ReportDiagnostic(diagnostic);
            }
        }
    }

    private static void GenerateBehaviorConfiguration(
        SourceProductionContext context,
        IEnumerable<PipelineBehaviorInfo> behaviors,
        bool includeDebugInfo)
    {
        var behaviorList = behaviors.ToList();

        if (!behaviorList.Any())
            return;

        var code = GenerateBehaviorConfigurationCode(behaviorList, includeDebugInfo);
        context.AddSource("PipelineBehaviorConfiguration.g.cs", code);
    }

    private static string GenerateBehaviorConfigurationCode(
        IEnumerable<PipelineBehaviorInfo> behaviors,
        bool includeDebugInfo)
    {
        var sb = new System.Text.StringBuilder();

        if (includeDebugInfo)
        {
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("// Generated pipeline behavior configuration");
            sb.AppendLine($"// Total behaviors: {behaviors.Count()}");
            sb.AppendLine();
        }

        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("using Handlr.Abstractions.Pipelines;");
        sb.AppendLine();

        sb.AppendLine("namespace Handlr.SourceGenerator.Generated;");
        sb.AppendLine();

        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Configuration for pipeline behaviors.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("public static class PipelineBehaviorConfiguration");
        sb.AppendLine("{");

        // Generate behavior priority configuration
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Gets the priority configuration for pipeline behaviors.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static Dictionary<Type, int> BehaviorPriorities { get; } = new()");
        sb.AppendLine("    {");

        foreach (var behavior in behaviors.OrderBy(b => b.Priority))
        {
            sb.AppendLine($"        {{ typeof({behavior.FullName}), {behavior.Priority} }},");
        }

        sb.AppendLine("    };");
        sb.AppendLine();

        // Generate conditional behavior configuration
        var conditionalBehaviors = behaviors.Where(b => b.IsConditional).ToList();
        if (conditionalBehaviors.Any())
        {
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// Gets the list of conditional behavior types.");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    public static HashSet<Type> ConditionalBehaviors { get; } = new()");
            sb.AppendLine("    {");

            foreach (var behavior in conditionalBehaviors)
            {
                sb.AppendLine($"        typeof({behavior.FullName}),");
            }

            sb.AppendLine("    };");
            sb.AppendLine();
        }

        // Generate behavior ordering method
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Orders behaviors by their configured priority.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <typeparam name=\"TRequest\">The request type</typeparam>");
        sb.AppendLine("    /// <typeparam name=\"TResult\">The result type</typeparam>");
        sb.AppendLine("    /// <param name=\"behaviors\">The behaviors to order</param>");
        sb.AppendLine("    /// <returns>Ordered behaviors</returns>");
        sb.AppendLine("    public static IEnumerable<IPipelineBehavior<TRequest, TResult>> OrderBehaviors<TRequest, TResult>(");
        sb.AppendLine("        IEnumerable<IPipelineBehavior<TRequest, TResult>> behaviors)");
        sb.AppendLine("    {");
        sb.AppendLine("        return behaviors.OrderBy(b => BehaviorPriorities.GetValueOrDefault(b.GetType(), 100));");
        sb.AppendLine("    }");
        sb.AppendLine();

        // Generate conditional behavior filtering method
        if (conditionalBehaviors.Any())
        {
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// Filters conditional behaviors based on request characteristics.");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    /// <typeparam name=\"TRequest\">The request type</typeparam>");
            sb.AppendLine("    /// <typeparam name=\"TResult\">The result type</typeparam>");
            sb.AppendLine("    /// <param name=\"behaviors\">The behaviors to filter</param>");
            sb.AppendLine("    /// <param name=\"request\">The request</param>");
            sb.AppendLine("    /// <returns>Filtered behaviors</returns>");
            sb.AppendLine("    public static IEnumerable<IPipelineBehavior<TRequest, TResult>> FilterConditionalBehaviors<TRequest, TResult>(");
            sb.AppendLine("        IEnumerable<IPipelineBehavior<TRequest, TResult>> behaviors,");
            sb.AppendLine("        TRequest request)");
            sb.AppendLine("    {");
            sb.AppendLine("        foreach (var behavior in behaviors)");
            sb.AppendLine("        {");
            sb.AppendLine("            if (ConditionalBehaviors.Contains(behavior.GetType()))");
            sb.AppendLine("            {");
            sb.AppendLine("                if (behavior is IConditionalBehavior<TRequest, TResult> conditionalBehavior &&");
            sb.AppendLine("                    conditionalBehavior.ShouldExecute(request))");
            sb.AppendLine("                {");
            sb.AppendLine("                    yield return behavior;");
            sb.AppendLine("                }");
            sb.AppendLine("            }");
            sb.AppendLine("            else");
            sb.AppendLine("            {");
            sb.AppendLine("                yield return behavior;");
            sb.AppendLine("            }");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
        }

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static Diagnostic CreateDiagnostic(DiagnosticDescriptor descriptor, Location location, params object[] args)
    {
        return Diagnostic.Create(descriptor, location, args);
    }
}