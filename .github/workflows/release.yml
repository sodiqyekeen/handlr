name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        type: choice
        default: 'patch'
        options:
          - major
          - minor
          - patch
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Tag-based release
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          IS_PRERELEASE="false"
        else
          # Manual workflow dispatch
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            # Use custom version if provided
            VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Calculate version based on increment type
            LATEST_TAG=$(git tag --list 'v*' --sort=-version:refname | head -1 2>/dev/null || echo "v0.0.0")
            LATEST_VERSION="${LATEST_TAG#v}"
            
            echo "Found latest tag: $LATEST_TAG (version: $LATEST_VERSION)"
            
            # Parse semantic version (compatible with both macOS and Linux)
            MAJOR=$(echo "$LATEST_VERSION" | cut -d'.' -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d'.' -f2)  
            PATCH=$(echo "$LATEST_VERSION" | cut -d'.' -f3)
            
            # Default to 0 if any part is empty
            MAJOR=${MAJOR:-0}
            MINOR=${MINOR:-0}
            PATCH=${PATCH:-0}
            
            echo "Parsed version: $MAJOR.$MINOR.$PATCH"
            
            case "${{ github.event.inputs.version_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                echo "Major increment: $MAJOR.$MINOR.$PATCH"
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                echo "Minor increment: $MAJOR.$MINOR.$PATCH"
                ;;
              patch)
                PATCH=$((PATCH + 1))
                echo "Patch increment: $MAJOR.$MINOR.$PATCH"
                ;;
            esac
            
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            VERSION="${VERSION}-preview.$(date +%Y%m%d%H%M%S)"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Determined version: $VERSION (prerelease: $IS_PRERELEASE)"
        
        # Validate semantic version format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: determine-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Run all tests
      run: dotnet test --configuration Release --no-build --verbosity normal

  build-and-pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    needs: [determine-version, validate-release]
    outputs:
      version: ${{ needs.determine-version.outputs.version }}
      is_prerelease: ${{ needs.determine-version.outputs.is_prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Set release version
      run: |
        VERSION="${{ needs.determine-version.outputs.version }}"
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building version: $VERSION"

    - name: Update project versions
      run: |
        # Update Directory.Build.props with the release version
        sed -i "s/<Version>.*<\/Version>/<Version>${RELEASE_VERSION}<\/Version>/" Directory.Build.props
        sed -i "s/<VersionPrefix>.*<\/VersionPrefix>/<VersionPrefix>${RELEASE_VERSION}<\/VersionPrefix>/" Directory.Build.props
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${RELEASE_VERSION}<\/AssemblyVersion>/" Directory.Build.props
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${RELEASE_VERSION}<\/FileVersion>/" Directory.Build.props
        
        echo "Updated versions in Directory.Build.props:"
        cat Directory.Build.props | grep -E "<Version>|<VersionPrefix>|<AssemblyVersion>|<FileVersion>"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build

    - name: Pack NuGet packages
      run: |
        dotnet pack src/Handlr.Abstractions --configuration Release --no-build --output ./packages
        dotnet pack src/Handlr.SourceGenerator --configuration Release --no-build --output ./packages

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ needs.determine-version.outputs.version }}
        path: ./packages/*.nupkg
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-pack, determine-version]
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.determine-version.outputs.version }}
        path: ./packages

    - name: Generate comprehensive release notes
      id: release-notes
      run: |
        VERSION="${{ needs.determine-version.outputs.version }}"
        
        # Get the latest tag (previous release)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Start building release notes
        echo "# 🚀 Handlr CQRS Framework v$VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        # Add custom release notes if provided
        if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
          echo "## 📋 Release Highlights" >> release-notes.md
          echo "" >> release-notes.md
          echo "${{ github.event.inputs.release_notes }}" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Generate automatic changelog
        echo "## 📝 What's Changed" >> release-notes.md
        echo "" >> release-notes.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "### 🔄 Changes since $PREVIOUS_TAG:" >> release-notes.md
          echo "" >> release-notes.md
          
          # Categorize commits
          FEATURES=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="feat" --grep="feature" -i || true)
          FIXES=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="fix" --grep="bug" -i || true)
          DOCS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="doc" --grep="readme" -i || true)
          CHORES=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="chore" --grep="refactor" --grep="style" -i || true)
          
          if [[ -n "$FEATURES" ]]; then
            echo "#### ✨ New Features" >> release-notes.md
            echo "$FEATURES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$FIXES" ]]; then
            echo "#### 🐛 Bug Fixes" >> release-notes.md
            echo "$FIXES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$DOCS" ]]; then
            echo "#### 📚 Documentation" >> release-notes.md
            echo "$DOCS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$CHORES" ]]; then
            echo "#### 🔧 Maintenance" >> release-notes.md
            echo "$CHORES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # Show all commits if no categorized commits found
          OTHER_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --invert-grep --grep="feat\|feature\|fix\|bug\|doc\|readme\|chore\|refactor\|style" -i || true)
          if [[ -n "$OTHER_COMMITS" ]]; then
            echo "#### 🔄 Other Changes" >> release-notes.md
            echo "$OTHER_COMMITS" >> release-notes.md
            echo "" >> release-notes.md
          fi
        else
          echo "### 🎉 Initial Release" >> release-notes.md
          echo "- Initial release of Handlr CQRS Framework" >> release-notes.md
          echo "- Source generator-powered CQRS implementation for .NET 9.0" >> release-notes.md
          echo "- Zero runtime reflection with high performance" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Package information
        echo "## 📦 NuGet Packages" >> release-notes.md
        echo "" >> release-notes.md
        echo "| Package | Version | Description |" >> release-notes.md
        echo "|---------|---------|-------------|" >> release-notes.md
        echo "| [Handlr.Abstractions](https://www.nuget.org/packages/Handlr.Abstractions/) | \`$VERSION\` | Core abstractions and interfaces for CQRS |" >> release-notes.md
        echo "| [Handlr.SourceGenerator](https://www.nuget.org/packages/Handlr.SourceGenerator/) | \`$VERSION\` | Source generator for automatic handler generation |" >> release-notes.md
        echo "" >> release-notes.md
        
        # Installation instructions
        echo "## 🛠️ Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "# Install via .NET CLI" >> release-notes.md
        echo "dotnet add package Handlr.Abstractions --version $VERSION" >> release-notes.md
        echo "dotnet add package Handlr.SourceGenerator --version $VERSION" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Or via Package Manager Console" >> release-notes.md
        echo "Install-Package Handlr.Abstractions -Version $VERSION" >> release-notes.md
        echo "Install-Package Handlr.SourceGenerator -Version $VERSION" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        
        # Additional resources
        echo "## 📖 Resources" >> release-notes.md
        echo "" >> release-notes.md
        echo "- 📚 [Documentation](https://sodiqyekeen.github.io/handlr/)" >> release-notes.md
        echo "- 🔧 [API Reference](https://sodiqyekeen.github.io/handlr/api/)" >> release-notes.md
        echo "- 💡 [Sample Projects](https://github.com/sodiqyekeen/handlr/tree/main/samples)" >> release-notes.md
        echo "- 🐛 [Report Issues](https://github.com/sodiqyekeen/handlr/issues)" >> release-notes.md
        echo "" >> release-notes.md
        echo "---" >> release-notes.md
        echo "*Built with ❤️ for the .NET community*" >> release-notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'push' && github.ref_name || format('v{0}', needs.determine-version.outputs.version) }}
        name: ${{ needs.determine-version.outputs.is_prerelease == 'true' && format('Handlr v{0} (Preview)', needs.determine-version.outputs.version) || format('Handlr v{0}', needs.determine-version.outputs.version) }}
        body_path: release-notes.md
        files: ./packages/*.nupkg
        draft: false
        prerelease: ${{ needs.determine-version.outputs.is_prerelease == 'true' }}
        make_latest: ${{ needs.determine-version.outputs.is_prerelease == 'false' }}

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [build-and-pack, create-release, determine-version]
    environment: production
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.determine-version.outputs.version }}
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Publish to NuGet.org
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if [[ -z "$NUGET_API_KEY" ]]; then
          echo "⚠️ NUGET_API_KEY not configured, skipping NuGet.org publish"
          echo "🔍 To publish to NuGet.org, add NUGET_API_KEY secret to repository settings"
        else
          echo "📦 Publishing to NuGet.org..."
          dotnet nuget push ./packages/*.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key $NUGET_API_KEY \
            --skip-duplicate
          echo "✅ Successfully published to NuGet.org"
        fi

    - name: Publish to GitHub Packages
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📦 Publishing to GitHub Packages..."
        
        # Configure GitHub Packages source
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
        # Push packages to GitHub Packages
        dotnet nuget push ./packages/*.nupkg \
          --source github \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate
        
        echo "✅ Successfully published to GitHub Packages"