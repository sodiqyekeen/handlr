name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Run all tests
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Validate version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Validating version: $VERSION"
        
        # Validate semantic version format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

  build-and-pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Update project versions
      run: |
        # Update Directory.Build.props with the release version
        sed -i "s/<Version>.*<\/Version>/<Version>${RELEASE_VERSION}<\/Version>/" Directory.Build.props
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${RELEASE_VERSION}<\/AssemblyVersion>/" Directory.Build.props
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${RELEASE_VERSION}<\/FileVersion>/" Directory.Build.props

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build

    - name: Pack NuGet packages
      run: |
        dotnet pack src/Handlr.Abstractions --configuration Release --no-build --output ./packages
        dotnet pack src/Handlr.SourceGenerator --configuration Release --no-build --output ./packages

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ steps.version.outputs.version }}
        path: ./packages/*.nupkg
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-pack
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.build-and-pack.outputs.version }}
        path: ./packages

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.build-and-pack.outputs.version }}"
        
        # Get the latest tag (previous release)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        echo "## What's Changed" > release-notes.md
        echo "" >> release-notes.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "### Commits since $PREVIOUS_TAG:" >> release-notes.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release-notes.md
        else
          echo "### Initial Release" >> release-notes.md
          echo "- Initial release of Handlr CQRS Framework" >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Packages" >> release-notes.md
        echo "- **Handlr.Abstractions** v$VERSION - Core abstractions for CQRS" >> release-notes.md
        echo "- **Handlr.SourceGenerator** v$VERSION - Source generator for handlers" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo '```bash' >> release-notes.md
        echo "dotnet add package Handlr.Abstractions --version $VERSION" >> release-notes.md
        echo "dotnet add package Handlr.SourceGenerator --version $VERSION" >> release-notes.md
        echo '```' >> release-notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'push' && github.ref_name || format('v{0}', needs.build-and-pack.outputs.version) }}
        name: Handlr v${{ needs.build-and-pack.outputs.version }}
        body_path: release-notes.md
        files: ./packages/*.nupkg
        draft: false
        prerelease: ${{ contains(needs.build-and-pack.outputs.version, '-') }}

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [build-and-pack, create-release]
    environment: production
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.build-and-pack.outputs.version }}
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Publish to NuGet
      run: |
        dotnet nuget push ./packages/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --skip-duplicate

    - name: Publish to GitHub Packages
      run: |
        dotnet nuget push ./packages/*.nupkg \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate