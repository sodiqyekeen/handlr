name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        type: choice
        default: 'patch'
        options:
          - major
          - minor
          - patch
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Tag-based release
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          IS_PRERELEASE="false"
        else
          # Manual workflow dispatch
          if [[ -n "${{ github.event.inputs.custom_version }}" ]]; then
            # Use custom version if provided
            VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Calculate version based on increment type
            LATEST_TAG=$(git tag --list 'v*' --sort=-version:refname | head -1 2>/dev/null || echo "v0.0.0")
            LATEST_VERSION="${LATEST_TAG#v}"
            
            echo "Found latest tag: $LATEST_TAG (version: $LATEST_VERSION)"
            
            # Parse semantic version (compatible with both macOS and Linux)
            MAJOR=$(echo "$LATEST_VERSION" | cut -d'.' -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d'.' -f2)  
            PATCH=$(echo "$LATEST_VERSION" | cut -d'.' -f3)
            
            # Default to 0 if any part is empty
            MAJOR=${MAJOR:-0}
            MINOR=${MINOR:-0}
            PATCH=${PATCH:-0}
            
            echo "Parsed version: $MAJOR.$MINOR.$PATCH"
            
            case "${{ github.event.inputs.version_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                echo "Major increment: $MAJOR.$MINOR.$PATCH"
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                echo "Minor increment: $MAJOR.$MINOR.$PATCH"
                ;;
              patch)
                PATCH=$((PATCH + 1))
                echo "Patch increment: $MAJOR.$MINOR.$PATCH"
                ;;
            esac
            
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            VERSION="${VERSION}-preview.$(date +%Y%m%d%H%M%S)"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Determined version: $VERSION (prerelease: $IS_PRERELEASE)"
        
        # Validate semantic version format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: determine-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Run all tests
      run: dotnet test --configuration Release --no-build --verbosity normal

  build-and-pack:
    name: Build and Pack
    runs-on: ubuntu-latest
    needs: [determine-version, validate-release]
    outputs:
      version: ${{ needs.determine-version.outputs.version }}
      is_prerelease: ${{ needs.determine-version.outputs.is_prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Set release version
      run: |
        VERSION="${{ needs.determine-version.outputs.version }}"
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building version: $VERSION"

    - name: Update project versions
      run: |
        # Update Directory.Build.props with the release version
        sed -i "s/<Version>.*<\/Version>/<Version>${RELEASE_VERSION}<\/Version>/" Directory.Build.props
        sed -i "s/<VersionPrefix>.*<\/VersionPrefix>/<VersionPrefix>${RELEASE_VERSION}<\/VersionPrefix>/" Directory.Build.props
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${RELEASE_VERSION}<\/AssemblyVersion>/" Directory.Build.props
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${RELEASE_VERSION}<\/FileVersion>/" Directory.Build.props
        
        echo "Updated versions in Directory.Build.props:"
        cat Directory.Build.props | grep -E "<Version>|<VersionPrefix>|<AssemblyVersion>|<FileVersion>"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build

    - name: Pack NuGet packages
      run: |
        dotnet pack src/Handlr.Abstractions --configuration Release --no-build --output ./packages
        dotnet pack src/Handlr.SourceGenerator --configuration Release --no-build --output ./packages

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ needs.determine-version.outputs.version }}
        path: ./packages/*.nupkg
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-pack, determine-version]
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.determine-version.outputs.version }}
        path: ./packages

    - name: Generate comprehensive release notes
      id: release-notes
      run: |
        VERSION="${{ needs.determine-version.outputs.version }}"
        
        # Get the latest tag (previous release) - use the same logic as version calculation
        PREVIOUS_TAG=$(git tag --list 'v*' --sort=-version:refname | head -2 | tail -1 2>/dev/null || echo "")
        if [[ "$PREVIOUS_TAG" == "v$VERSION" ]]; then
          # If current version is the latest, get the second latest
          PREVIOUS_TAG=$(git tag --list 'v*' --sort=-version:refname | head -3 | tail -1 2>/dev/null || echo "")
        fi
        
        echo "Generating release notes for v$VERSION (previous: $PREVIOUS_TAG)"
        
        # Start building release notes
        echo "# 🚀 Handlr CQRS Framework v$VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        # Add release date and type
        RELEASE_DATE=$(date '+%B %d, %Y')
        if [[ "${{ needs.determine-version.outputs.is_prerelease }}" == "true" ]]; then
          echo "**🔬 Pre-release** • Released on $RELEASE_DATE" >> release-notes.md
        else
          echo "**✅ Stable Release** • Released on $RELEASE_DATE" >> release-notes.md
        fi
        echo "" >> release-notes.md
        
        # Add custom release notes if provided
        if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
          echo "## 📋 Release Highlights" >> release-notes.md
          echo "" >> release-notes.md
          echo "${{ github.event.inputs.release_notes }}" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Generate automatic changelog
        echo "## 📝 What's Changed" >> release-notes.md
        echo "" >> release-notes.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "### 🔄 Changes since $PREVIOUS_TAG:" >> release-notes.md
          echo "" >> release-notes.md
          
          # Enhanced commit categorization
          BREAKING=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="BREAKING" --grep="breaking change" -i || true)
          FEATURES=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="feat" --grep="feature" --grep="add" -i || true)
          IMPROVEMENTS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="improve" --grep="enhance" --grep="perf" --grep="performance" -i || true)
          FIXES=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="fix" --grep="bug" --grep="resolve" -i || true)
          SECURITY=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="security" --grep="vulnerability" --grep="CVE" -i || true)
          DOCS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="doc" --grep="readme" --grep="documentation" -i || true)
          TESTS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="test" --grep="spec" --grep="coverage" -i || true)
          CI_CD=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="ci" --grep="cd" --grep="pipeline" --grep="workflow" --grep="github" -i || true)
          DEPS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="deps" --grep="dependencies" --grep="bump" --grep="update.*package" -i || true)
          CHORES=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --grep="chore" --grep="refactor" --grep="style" --grep="format" -i || true)
          
          # Show breaking changes first if any
          if [[ -n "$BREAKING" ]]; then
            echo "#### ⚠️ Breaking Changes" >> release-notes.md
            echo "" >> release-notes.md
            echo "$BREAKING" >> release-notes.md
            echo "" >> release-notes.md
            echo "> **Note:** This release contains breaking changes. Please review the migration guide in our documentation." >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$FEATURES" ]]; then
            echo "#### ✨ New Features" >> release-notes.md
            echo "" >> release-notes.md
            echo "$FEATURES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$IMPROVEMENTS" ]]; then
            echo "#### 🚀 Improvements" >> release-notes.md
            echo "" >> release-notes.md
            echo "$IMPROVEMENTS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$FIXES" ]]; then
            echo "#### 🐛 Bug Fixes" >> release-notes.md
            echo "" >> release-notes.md
            echo "$FIXES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$SECURITY" ]]; then
            echo "#### 🔒 Security" >> release-notes.md
            echo "" >> release-notes.md
            echo "$SECURITY" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$DOCS" ]]; then
            echo "#### 📚 Documentation" >> release-notes.md
            echo "" >> release-notes.md
            echo "$DOCS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$TESTS" ]]; then
            echo "#### 🧪 Testing" >> release-notes.md
            echo "" >> release-notes.md
            echo "$TESTS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$CI_CD" ]]; then
            echo "#### 🔧 CI/CD & Infrastructure" >> release-notes.md
            echo "" >> release-notes.md
            echo "$CI_CD" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$DEPS" ]]; then
            echo "#### 📦 Dependencies" >> release-notes.md
            echo "" >> release-notes.md
            echo "$DEPS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$CHORES" ]]; then
            echo "#### 🔧 Maintenance" >> release-notes.md
            echo "" >> release-notes.md
            echo "$CHORES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # Show all other commits if no categorized commits found
          OTHER_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD \
            --invert-grep \
            --grep="BREAKING\|breaking change\|feat\|feature\|add\|improve\|enhance\|perf\|performance\|fix\|bug\|resolve\|security\|vulnerability\|CVE\|doc\|readme\|documentation\|test\|spec\|coverage\|ci\|cd\|pipeline\|workflow\|github\|deps\|dependencies\|bump\|update.*package\|chore\|refactor\|style\|format" \
            -i || true)
          if [[ -n "$OTHER_COMMITS" ]]; then
            echo "#### 🔄 Other Changes" >> release-notes.md
            echo "" >> release-notes.md
            echo "$OTHER_COMMITS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # Add contributor acknowledgments
          CONTRIBUTORS=$(git log --pretty=format:"%an" $PREVIOUS_TAG..HEAD | sort | uniq | grep -v "dependabot" | tr '\n' ', ' | sed 's/, $//' || true)
          if [[ -n "$CONTRIBUTORS" ]]; then
            echo "#### 👥 Contributors" >> release-notes.md
            echo "" >> release-notes.md
            echo "Thanks to all contributors who made this release possible: **$CONTRIBUTORS**" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
        else
          echo "### 🎉 Initial Release" >> release-notes.md
          echo "" >> release-notes.md
          echo "This is the initial release of Handlr CQRS Framework! 🎊" >> release-notes.md
          echo "" >> release-notes.md
          echo "#### ✨ Key Features" >> release-notes.md
          echo "- 🔄 **Source Generator Powered**: Automatic discovery and registration of commands, queries, and handlers" >> release-notes.md
          echo "- 🛡️ **Pipeline Behaviors**: Comprehensive cross-cutting concerns (validation, logging, caching, authorization, retry, metrics)" >> release-notes.md
          echo "- 🎯 **Type-Safe**: Strong typing with compile-time validation" >> release-notes.md
          echo "- 🔄 **Flexible Results**: Support for any return type including \`Result<T>\` pattern" >> release-notes.md
          echo "- 🏗️ **Dependency Injection Ready**: Built for modern .NET DI containers" >> release-notes.md
          echo "- 📖 **Example-Driven**: Rich examples and templates for rapid development" >> release-notes.md
          echo "- ⚡ **High Performance**: Zero runtime reflection with source generation" >> release-notes.md
          echo "- 🎯 **Clean Architecture**: Promotes CQRS best practices and clean code" >> release-notes.md
          echo "" >> release-notes.md
        fi
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$DOCS" ]]; then
            echo "#### 📚 Documentation" >> release-notes.md
            echo "$DOCS" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          if [[ -n "$CHORES" ]]; then
            echo "#### 🔧 Maintenance" >> release-notes.md
            echo "$CHORES" >> release-notes.md
            echo "" >> release-notes.md
          fi
          
          # Show all commits if no categorized commits found
          OTHER_COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD --invert-grep --grep="feat\|feature\|fix\|bug\|doc\|readme\|chore\|refactor\|style" -i || true)
          if [[ -n "$OTHER_COMMITS" ]]; then
            echo "#### 🔄 Other Changes" >> release-notes.md
            echo "$OTHER_COMMITS" >> release-notes.md
            echo "" >> release-notes.md
          fi
        else
          echo "### 🎉 Initial Release" >> release-notes.md
          echo "- Initial release of Handlr CQRS Framework" >> release-notes.md
          echo "- Source generator-powered CQRS implementation for .NET 9.0" >> release-notes.md
          echo "- Zero runtime reflection with high performance" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Technical Information
        echo "## ⚙️ Technical Details" >> release-notes.md
        echo "" >> release-notes.md
        echo "- **Target Framework**: .NET Standard 2.0" >> release-notes.md
        echo "- **Compatible with**: .NET 6.0+, .NET Framework 4.6.1+" >> release-notes.md
        echo "- **C# Language Version**: Latest" >> release-notes.md
        echo "- **Package Format**: PackageReference (modern .NET projects)" >> release-notes.md
        echo "- **Source Generator**: Incremental source generation for optimal performance" >> release-notes.md
        echo "" >> release-notes.md
        
        # Package information
        echo "## 📦 NuGet Packages" >> release-notes.md
        echo "" >> release-notes.md
        echo "| Package | Version | Downloads | Description |" >> release-notes.md
        echo "|---------|---------|-----------|-------------|" >> release-notes.md
        echo "| [Handlr.Abstractions](https://www.nuget.org/packages/Handlr.Abstractions/) | \`$VERSION\` | [![NuGet](https://img.shields.io/nuget/dt/Handlr.Abstractions.svg)](https://www.nuget.org/packages/Handlr.Abstractions/) | Core abstractions and interfaces for CQRS |" >> release-notes.md
        echo "| [Handlr.SourceGenerator](https://www.nuget.org/packages/Handlr.SourceGenerator/) | \`$VERSION\` | [![NuGet](https://img.shields.io/nuget/dt/Handlr.SourceGenerator.svg)](https://www.nuget.org/packages/Handlr.SourceGenerator/) | Source generator for automatic handler generation |" >> release-notes.md
        echo "" >> release-notes.md
        
        # Installation instructions
        echo "## 🛠️ Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Package Manager Console" >> release-notes.md
        echo "\`\`\`powershell" >> release-notes.md
        echo "Install-Package Handlr.Abstractions -Version $VERSION" >> release-notes.md
        echo "Install-Package Handlr.SourceGenerator -Version $VERSION" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### .NET CLI" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "dotnet add package Handlr.Abstractions --version $VERSION" >> release-notes.md
        echo "dotnet add package Handlr.SourceGenerator --version $VERSION" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### PackageReference (csproj)" >> release-notes.md
        echo "\`\`\`xml" >> release-notes.md
        echo "<PackageReference Include=\"Handlr.Abstractions\" Version=\"$VERSION\" />" >> release-notes.md
        echo "<PackageReference Include=\"Handlr.SourceGenerator\" Version=\"$VERSION\">" >> release-notes.md
        echo "  <OutputItemType>Analyzer</OutputItemType>" >> release-notes.md
        echo "  <ReferenceOutputAssembly>false</ReferenceOutputAssembly>" >> release-notes.md
        echo "</PackageReference>" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        
        # Quick start guide
        echo "## 🚀 Quick Start" >> release-notes.md
        echo "" >> release-notes.md
        echo "### 1. Define Commands and Queries" >> release-notes.md
        echo "\`\`\`csharp" >> release-notes.md
        echo "// Command" >> release-notes.md
        echo "public record CreateUserCommand : ICommand<Result<User>>" >> release-notes.md
        echo "{" >> release-notes.md
        echo "    public string Name { get; init; } = string.Empty;" >> release-notes.md
        echo "    public string Email { get; init; } = string.Empty;" >> release-notes.md
        echo "}" >> release-notes.md
        echo "" >> release-notes.md
        echo "// Query" >> release-notes.md
        echo "public record GetUserQuery : IQuery<Result<User>>" >> release-notes.md
        echo "{" >> release-notes.md
        echo "    public int UserId { get; init; };" >> release-notes.md
        echo "}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### 2. Implement Handlers" >> release-notes.md
        echo "\`\`\`csharp" >> release-notes.md
        echo "public partial class CreateUserCommandHandler" >> release-notes.md
        echo "{" >> release-notes.md
        echo "    public partial async Task<Result<User>> HandleAsync(" >> release-notes.md
        echo "        CreateUserCommand command, CancellationToken cancellationToken)" >> release-notes.md
        echo "    {" >> release-notes.md
        echo "        // Your business logic here" >> release-notes.md
        echo "        var user = new User(command.Name, command.Email);" >> release-notes.md
        echo "        return Result<User>.Success(user);" >> release-notes.md
        echo "    }" >> release-notes.md
        echo "}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### 3. Register and Use" >> release-notes.md
        echo "\`\`\`csharp" >> release-notes.md
        echo "// Register services (automatically generated)" >> release-notes.md
        echo "services.AddHandlr();" >> release-notes.md
        echo "" >> release-notes.md
        echo "// Use in controllers or services" >> release-notes.md
        echo "var result = await handlr.SendAsync(new CreateUserCommand" >> release-notes.md
        echo "{ " >> release-notes.md
        echo "    Name = \"John Doe\", " >> release-notes.md
        echo "    Email = \"john@example.com\" " >> release-notes.md
        echo "});" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        
        # Additional resources
        echo "## 📖 Resources" >> release-notes.md
        echo "" >> release-notes.md
        echo "| Resource | Link | Description |" >> release-notes.md
        echo "|----------|------|-------------|" >> release-notes.md
        echo "| 📚 Documentation | [sodiqyekeen.github.io/handlr](https://sodiqyekeen.github.io/handlr/) | Complete framework documentation |" >> release-notes.md
        echo "| 🔧 API Reference | [API Docs](https://sodiqyekeen.github.io/handlr/api/) | Detailed API documentation |" >> release-notes.md
        echo "| 💡 Sample Projects | [GitHub Samples](https://github.com/sodiqyekeen/handlr/tree/main/samples) | Working examples and templates |" >> release-notes.md
        echo "| 🧪 Getting Started | [Quick Start Guide](https://sodiqyekeen.github.io/handlr/docs/getting-started/) | Step-by-step setup instructions |" >> release-notes.md
        echo "| 🎯 Pipeline Behaviors | [Behavior Guide](https://sodiqyekeen.github.io/handlr/docs/behaviors/) | Cross-cutting concerns examples |" >> release-notes.md
        echo "| 💬 Discussions | [GitHub Discussions](https://github.com/sodiqyekeen/handlr/discussions) | Community support and Q&A |" >> release-notes.md
        echo "| 🐛 Issues | [GitHub Issues](https://github.com/sodiqyekeen/handlr/issues) | Bug reports and feature requests |" >> release-notes.md
        echo "" >> release-notes.md
        
        # Migration guide for non-initial releases
        if [[ -n "$PREVIOUS_TAG" && -n "$BREAKING" ]]; then
          echo "## 🔄 Migration Guide" >> release-notes.md
          echo "" >> release-notes.md
          echo "This release contains breaking changes. Please follow these steps to migrate:" >> release-notes.md
          echo "" >> release-notes.md
          echo "1. **Review Breaking Changes**: Check the breaking changes section above" >> release-notes.md
          echo "2. **Update Dependencies**: Update to the latest package versions" >> release-notes.md
          echo "3. **Update Code**: Apply necessary code changes based on breaking changes" >> release-notes.md
          echo "4. **Test Thoroughly**: Run your test suite to ensure compatibility" >> release-notes.md
          echo "5. **Check Documentation**: Review updated documentation for new patterns" >> release-notes.md
          echo "" >> release-notes.md
          echo "💡 **Need help?** Create a discussion in our [GitHub Discussions](https://github.com/sodiqyekeen/handlr/discussions) for migration support." >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Performance and compatibility notes
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "## 🎯 Compatibility & Performance" >> release-notes.md
          echo "" >> release-notes.md
          echo "- ✅ **Backward Compatible**: This release maintains API compatibility" >> release-notes.md
          if [[ -n "$BREAKING" ]]; then
            echo "- ⚠️ **Breaking Changes**: See migration guide above" >> release-notes.md
          fi
          echo "- 🚀 **Performance**: Source generation ensures zero runtime reflection" >> release-notes.md
          echo "- 🎯 **Target Frameworks**: .NET Standard 2.0 (compatible with .NET 6.0+)" >> release-notes.md
          echo "- 📦 **Package Size**: Optimized for minimal footprint" >> release-notes.md
          echo "- 🔧 **Build Time**: Incremental source generation for fast builds" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        # Footer with community info
        echo "---" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🌟 Support the Project" >> release-notes.md
        echo "" >> release-notes.md
        echo "If you find Handlr useful, please consider:" >> release-notes.md
        echo "- ⭐ **Starring** the repository on GitHub" >> release-notes.md
        echo "- 📢 **Sharing** with your colleagues and community" >> release-notes.md
        echo "- 🐛 **Reporting** issues and suggesting improvements" >> release-notes.md
        echo "- 🤝 **Contributing** code, documentation, or examples" >> release-notes.md
        echo "" >> release-notes.md
        echo "**Built with ❤️ by [Sodiq Yekeen](https://github.com/sodiqyekeen) and the .NET community**" >> release-notes.md
        echo "" >> release-notes.md
        echo "_Thank you for using Handlr CQRS Framework!_ 🙏" >> release-notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'push' && github.ref_name || format('v{0}', needs.determine-version.outputs.version) }}
        name: ${{ needs.determine-version.outputs.is_prerelease == 'true' && format('Handlr v{0} (Preview)', needs.determine-version.outputs.version) || format('Handlr v{0}', needs.determine-version.outputs.version) }}
        body_path: release-notes.md
        files: ./packages/*.nupkg
        draft: false
        prerelease: ${{ needs.determine-version.outputs.is_prerelease == 'true' }}
        make_latest: ${{ needs.determine-version.outputs.is_prerelease == 'false' }}

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [build-and-pack, create-release, determine-version]
    environment: production
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.determine-version.outputs.version }}
        path: ./packages

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Publish to NuGet.org
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if [[ -z "$NUGET_API_KEY" ]]; then
          echo "⚠️ NUGET_API_KEY not configured, skipping NuGet.org publish"
          echo "🔍 To publish to NuGet.org, add NUGET_API_KEY secret to repository settings"
        else
          echo "📦 Publishing to NuGet.org..."
          dotnet nuget push ./packages/*.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key $NUGET_API_KEY \
            --skip-duplicate
          echo "✅ Successfully published to NuGet.org"
        fi

    - name: Publish to GitHub Packages
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📦 Publishing to GitHub Packages..."
        
        # Configure GitHub Packages source
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
        # Push packages to GitHub Packages
        dotnet nuget push ./packages/*.nupkg \
          --source github \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate
        
        echo "✅ Successfully published to GitHub Packages"