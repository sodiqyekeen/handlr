name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

  build-samples:
    name: Build Samples
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build Console Sample
      run: dotnet build samples/SampleConsoleApp --configuration Release

    - name: Build Web API Sample
      run: dotnet build samples/SampleWebApi --configuration Release

    - name: Test Console Sample
      run: dotnet run --project samples/SampleConsoleApp --configuration Release

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run Format Check
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Install dotnet tools
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Build for Analysis
      run: dotnet build --configuration Release

    - name: Run Security Analysis
      run: |
        echo "Running basic security checks..."
        # Check for common security issues in packages
        dotnet list package --vulnerable --include-transitive > security-scan.txt 2>&1 || true
        if grep -q "has the following vulnerable packages" security-scan.txt; then
          echo "⚠️ Vulnerable packages detected:"
          cat security-scan.txt
        else
          echo "✅ No vulnerable packages found"
        fi

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [test, build-samples, code-quality]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Pack NuGet packages
      run: |
        dotnet pack src/Handlr.Abstractions --configuration Release --no-build --output ./packages
        dotnet pack src/Handlr.SourceGenerator --configuration Release --no-build --output ./packages

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 30

    - name: Upload packages to GitHub Packages (Preview)
      if: github.ref == 'refs/heads/main'
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure GitHub Packages source
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
        # Push packages to GitHub Packages
        dotnet nuget push ./packages/*.nupkg \
          --source github \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate